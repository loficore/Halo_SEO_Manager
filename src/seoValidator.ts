import { log } from './logger';
import { SeoMeta, SeoValidationError, SeoValidationReport } from './types/seo'; // Import types

/**
 * 中文注释：SEO校验器类
 * 负责对LLM生成的SEO元数据进行校验
 * English comment: SEO Validator class
 * Responsible for validating SEO meta data generated by LLM
 */
export class SeoValidator {
  constructor() {
    log('info', 'SeoValidator', 'SeoValidator initialized');
  }

  /**
   * 中文注释：返回结构化错误报告
   * English: Return structured validation report
   */
  validateSeoMetaReport(seoMeta: SeoMeta): SeoValidationReport {
    log('debug', 'SeoValidator', 'Validating SEO meta:', { seoMeta });
    let isValid = true;
    const errors: SeoValidationError[] = [];

    // 1. metaTitle 校验
    // metaTitle validation
    if (!seoMeta.metaTitle || seoMeta.metaTitle.length === 0) {
      isValid = false;
      errors.push({ field: 'metaTitle', code: 'empty', message: 'metaTitle cannot be empty.', currentValue: seoMeta.metaTitle });
    }
    if (seoMeta.metaTitle && seoMeta.metaTitle.length > 60) {
      isValid = false;
      errors.push({ field: 'metaTitle', code: 'too_long', message: 'metaTitle must be <= 60 characters.', currentLength: seoMeta.metaTitle.length, requirement: '<= 60' });
    }

    // 2. metaDescription 校验
    // metaDescription validation
    if (!seoMeta.metaDescription || seoMeta.metaDescription.length === 0) {
      isValid = false;
      errors.push({ field: 'metaDescription', code: 'empty', message: 'metaDescription cannot be empty.', currentValue: seoMeta.metaDescription });
    }
    if (seoMeta.metaDescription && (seoMeta.metaDescription.length < 80 || seoMeta.metaDescription.length > 160)) {
      isValid = false;
      errors.push({ field: 'metaDescription', code: 'length_range', message: 'metaDescription length must be 80–160 characters.', currentLength: seoMeta.metaDescription.length, requirement: '80–160' });
    }

    // 3. keywords 校验
    // keywords validation
    if (!seoMeta.keywords || seoMeta.keywords.length === 0) {
      isValid = false;
      errors.push({ field: 'keywords', code: 'empty', message: 'keywords cannot be empty.' });
    } else {
      if (seoMeta.keywords.length < 2 || seoMeta.keywords.length > 5) {
        isValid = false;
        errors.push({ field: 'keywords', code: 'count_range', message: 'keywords array length must be between 2 and 5.', currentLength: seoMeta.keywords.length, requirement: '2–5' });
      }
      for (const keyword of seoMeta.keywords) {
        if (!keyword || keyword.length === 0) {
          isValid = false;
          errors.push({ field: 'keywords', code: 'item_empty', message: 'Individual keyword cannot be empty.' });
          break;
        }
      }
    }

    // 4. slug 校验
    // slug validation
    if (!seoMeta.slug || seoMeta.slug.length === 0) {
      isValid = false;
      errors.push({ field: 'slug', code: 'empty', message: 'slug cannot be empty.' });
    }
    // 正则表达式校验简短英文或拼音转英文格式
    const slugRegex = /^[a-z0-9]+(?:-[a-z0-9]+)*$/;
    if (seoMeta.slug && !slugRegex.test(seoMeta.slug)) {
      isValid = false;
      errors.push({ field: 'slug', code: 'pattern', message: 'slug must match ^[a-z0-9]+(?:-[a-z0-9]+)*$ pattern.', currentValue: seoMeta.slug, requirement: 'lowercase a-z0-9 with hyphens' });
    }

    if (!isValid) {
      log('warn', 'SeoValidator', 'SEO meta validation failed:', { errors, seoMeta });
    } else {
      log('info', 'SeoValidator', 'SEO meta validated successfully.', { seoMeta });
    }

    return { valid: isValid, errors };
  }

  // 兼容旧接口：提供 strings 报告
  validateSeoMetaDetailed(seoMeta: SeoMeta): { valid: boolean; errors: string[] } {
    const report = this.validateSeoMetaReport(seoMeta);
    const errors = report.errors.map(e => `${e.field}: ${e.message}${e.currentLength !== undefined ? ` (current: ${e.currentLength})` : ''}`);
    return { valid: report.valid, errors };
  }

  // 兼容旧接口：只返回 boolean
  validateSeoMeta(seoMeta: SeoMeta): boolean {
    return this.validateSeoMetaReport(seoMeta).valid;
  }
}
